{"name": "test_model1", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: chrome=111.0.5563.64)", "trace": "self = <Test_Cases.test_model.TestModel object at 0x7fcbb26f3490>\nmodels_page = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"ef6de5b5795e2b393d064556108ab917\")>\n\n    @allure.step(\"Создание простой модели, добавление в нее компонентов, проверка и удаление\")\n    def test_model1(self, models_page):\n        print('Simple model component test launched...')\n        self.driver = models_page\n        name = 'AutoTest_Model'\n        description = 'Тестовая модель'\n        wait = WebDriverWait(self.driver, 15, 0.5)\n        wait.until(ec.presence_of_element_located((By.XPATH, '/html/body/app-root/app-admin-layout/div/main/app-models'\n                                                             '-page/header-layout/div/div[2]/aside-layout/div['\n                                                             '1]/lta-empty-panel/app-tree')))\n    \n        same_models = len(self.driver.find_elements(By.XPATH, \"//*[contains(text(),'\" + name + \"')]\"))\n        while same_models != 0:\n            name = name + str(random.randint(0, 100))\n            same_models = len(self.driver.find_elements(By.XPATH, \"//*[contains(text(),'\" + name + \"')]\"))\n    \n        button_create_model = self.driver.find_element(By.CLASS_NAME, 'btn.btn-icon.primary.md')\n        button_create_model.click()\n        wait.until(ec.presence_of_element_located((By.XPATH, \"//input[@class='classes']\")))\n        model_name = self.driver.find_element(By.XPATH, \"//input[@class='classes']\")\n        model_name.send_keys(name)\n        model_description = self.driver.find_element(By.CLASS_NAME, 'textarea.sm')\n        model_description.send_keys(description)\n        wait.until(ec.presence_of_element_located((By.CLASS_NAME, 'btn.success.md')))\n        save_button = self.driver.find_element(By.CLASS_NAME, 'btn.success.md')\n        save_button.click()\n        wait.until(ec.presence_of_element_located((By.CLASS_NAME, 'btn.dashed.md')))\n        add_component_button = self.driver.find_element(By.CLASS_NAME, 'btn.dashed.md')\n        add_component_button.click()\n        wait.until(ec.presence_of_element_located((By.XPATH, '/html/body/app-root/app-admin-layout/div/main/app'\n                                                             '-models-page/header-layout/div/div[2]/aside-layout/div['\n                                                             '2]/app-models-info-panel/app-model-component-dialog/lta'\n                                                             '-modal-layout/div/lta-modal/div[3]/lta-btn[1]/button')))\n        wait.until(ec.presence_of_element_located((By.XPATH, \"//*[contains(text(),' Arrow_Left ')]\")))\n        first_component = self.driver.find_element(By.XPATH, \"//*[contains(text(),' Arrow_Left ')]\")\n        first_component.click()\n        wait.until(ec.visibility_of_element_located((By.XPATH, '/html/body/app-root/app-admin-layout/div/main/app'\n                                                               '-models-page/header-layout/div/div['\n                                                               '2]/aside-layout/div['\n                                                               '2]/app-models-info-panel/app-model-component-dialog'\n                                                               '/lta-modal-layout/div/lta-modal/div[3]/lta-btn['\n                                                               '2]/button')))\n        add_component_button_window = self.driver.find_element(By.XPATH, '/html/body/app-root/app-admin-layout/div'\n                                                                         '/main/app-models-page/header-layout/div'\n                                                                         '/div[2]/aside-layout/div['\n                                                                         '2]/app-models-info-panel/app-model'\n                                                                         '-component-dialog/lta-modal-layout/div/lta'\n                                                                         '-modal/div[3]/lta-btn[2]/button')\n        add_component_button_window.click()\n        wait.until(ec.presence_of_element_located((By.XPATH, '/html/body/app-root/app-admin-layout/div/main/app'\n                                                             '-models-page/header-layout/div/div[2]/aside-layout/div['\n                                                             '2]/app-models-info-panel/form/div/div/div['\n                                                             '2]/app-model-component-widget/div/div[2]/lta-btn['\n                                                             '1]/button')))\n        first_component_added = self.driver.find_element(By.XPATH, \"//*[contains(text(),' Arrow_Left ')]\")\n        assert first_component_added.text == 'Arrow_Left', 'First component was not added'\n        print('First component added')\n        add_component_button.click()\n        wait.until(ec.presence_of_element_located((By.XPATH, '/html/body/app-root/app-admin-layout/div/main/app'\n                                                             '-models-page/header-layout/div/div[2]/aside-layout/div['\n                                                             '2]/app-models-info-panel/app-model-component-dialog/lta'\n                                                             '-modal-layout/div/lta-modal/div[3]/lta-btn[1]/button')))\n        wait.until(ec.presence_of_element_located((By.XPATH, \"//*[contains(text(),' Pump / Right  ')]\")))\n        second_component = self.driver.find_element(By.XPATH, \"//*[contains(text(),' Pump / Right  ')]\")\n        second_component.click()\n        wait.until(ec.visibility_of_element_located((By.XPATH, '/html/body/app-root/app-admin-layout/div/main/app'\n                                                               '-models-page/header-layout/div/div['\n                                                               '2]/aside-layout/div['\n                                                               '2]/app-models-info-panel/app-model-component-dialog'\n                                                               '/lta-modal-layout/div/lta-modal/div[3]/lta-btn['\n                                                               '2]/button')))\n        add_component_button_window = self.driver.find_element(By.XPATH, '/html/body/app-root/app-admin-layout/div'\n                                                                         '/main/app-models-page/header-layout/div'\n                                                                         '/div[2]/aside-layout/div['\n                                                                         '2]/app-models-info-panel/app-model'\n                                                                         '-component-dialog/lta-modal-layout/div/lta'\n                                                                         '-modal/div[3]/lta-btn[2]/button')\n        add_component_button_window.click()\n        wait.until(ec.presence_of_element_located((By.XPATH, '/html/body/app-root/app-admin-layout/div/main/app'\n                                                             '-models-page/header-layout/div/div[2]/aside-layout/div['\n                                                             '2]/app-models-info-panel/form/div/div/div['\n                                                             '2]/app-model-component-widget/div/div[2]/lta-btn['\n                                                             '1]/button')))\n        second_component_added = self.driver.find_element(By.XPATH, \"//*[contains(text(),' Pump / Right ')]\")\n>       assert second_component_added.text == 'Pump / Right', 'Second component was not added'\n\nTest_Cases/test_model.py:169: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:76: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)['value']\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py:633: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7fcbb3072400>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: element is n...ff80b9f24e1 _pthread_start + 125\\\\n23  libsystem_pthread.dylib             0x00007ff80b9edf6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\nE         (Session info: chrome=111.0.5563.64)\n\n/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py:242: StaleElementReferenceException"}, "steps": [{"name": "Создание простой модели, добавление в нее компонентов, проверка и удаление", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: element is not attached to the page document\n  (Session info: chrome=111.0.5563.64)\n\n", "trace": "  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/Users/maksim/PycharmProjects/LTA_TESTS/Test_Cases/test_model.py\", line 169, in test_model1\n    assert second_component_added.text == 'Pump / Right', 'Second component was not added'\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py\", line 76, in text\n    return self._execute(Command.GET_ELEMENT_TEXT)['value']\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/webelement.py\", line 633, in _execute\n    return self._parent.execute(command, params)\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"/Library/Frameworks/Python.framework/Versions/3.9/lib/python3.9/site-packages/selenium/webdriver/remote/errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "parameters": [{"name": "models_page", "value": "<selenium.webdriver.chrome.webdriver.WebDriver (session=\"ef6de5b5795e2b393d064556108ab917\")>"}], "start": 1682600154519, "stop": 1682600159554}], "start": 1682600154518, "stop": 1682600159573, "uuid": "1ccb957c-feb8-443c-a12d-b897a5c9e43f", "historyId": "ea9762191b37f571ad04b7f5ab0b1537", "testCaseId": "dcdfd77c6b942ac1a759f5de24289cd6", "fullName": "Test_Cases.test_model.TestModel#test_model1", "labels": [{"name": "parentSuite", "value": "Test_Cases"}, {"name": "suite", "value": "test_model"}, {"name": "subSuite", "value": "TestModel"}, {"name": "host", "value": "MacBook-Pro-Maksim.local"}, {"name": "thread", "value": "26178-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Test_Cases.test_model"}]}