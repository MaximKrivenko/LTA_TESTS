{"uid":"6fd331fad8716155","name":"test_platform","fullName":"Test_Cases.test_platform.TestPlatform#test_platform","historyId":"089703e47fa4f03c2912a566c93ad585","time":{"start":1691045253287,"stop":1691045253290,"duration":3},"status":"broken","statusMessage":"urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=45861): Max retries exceeded with url: /session/e5a689c724648f0d5308caa4a8bd27b1/element (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>: Failed to establish a new connection: [Errno 111] Connection refused'))","statusTrace":"self = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\n\n    def _new_conn(self):\n        \"\"\"Establish a socket connection and set nodelay settings on it.\n    \n        :return: New socket connection.\n        \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw[\"source_address\"] = self.source_address\n    \n        if self.socket_options:\n            extra_kw[\"socket_options\"] = self.socket_options\n    \n        try:\n>           conn = connection.create_connection(\n                (self._dns_host, self.port), self.timeout, **extra_kw\n            )\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connection.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('localhost', 45861), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(\n        address,\n        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n        source_address=None,\n        socket_options=None,\n    ):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`socket.getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith(\"[\"):\n            host = host.strip(\"[]\")\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        try:\n            host.encode(\"idna\")\n        except UnicodeError:\n            return six.raise_from(\n                LocationParseError(u\"'%s', label empty or too long\" % host), None\n            )\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/util/connection.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('localhost', 45861), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(\n        address,\n        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n        source_address=None,\n        socket_options=None,\n    ):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`socket.getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith(\"[\"):\n            host = host.strip(\"[]\")\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        try:\n            host.encode(\"idna\")\n        except UnicodeError:\n            return six.raise_from(\n                LocationParseError(u\"'%s', label empty or too long\" % host), None\n            )\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [Errno 111] Connection refused\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/util/connection.py:85: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f87d31b3730>\nmethod = 'POST', url = '/session/e5a689c724648f0d5308caa4a8bd27b1/element'\nbody = '{\"using\": \"xpath\", \"value\": \"/html/body/app-root/app-main-page/toolbar/div/div[3]/div[4]/svg-icon\"}'\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.10.0 (python linux)'}\nretries = Retry(total=0, connect=None, read=None, redirect=None, status=None)\nredirect = False, assert_same_host = False\ntimeout = <object object at 0x7f87d4d2a6d0>, pool_timeout = None\nrelease_conn = True, chunked = False, body_pos = None\nresponse_kw = {'request_url': 'http://localhost:45861/session/e5a689c724648f0d5308caa4a8bd27b1/element'}\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/session/e5a689c724648f0d5308caa4a8bd27b1/element', query=None, fragment=None)\ndestination_scheme = None, conn = None, release_this_conn = True\nhttp_tunnel_required = False, err = None, clean_exit = False\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        body_pos=None,\n        **response_kw\n    ):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When ``False``, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n    \n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n    \n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get(\"preload_content\", True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = six.ensure_str(_encode_target(url))\n        else:\n            url = six.ensure_str(parsed_url.url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n    \n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else's copy.\n        if not http_tunnel_required:\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(\n                conn, \"sock\", None\n            )\n            if is_new_proxy_conn and http_tunnel_required:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n>           httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n            )\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connectionpool.py:714: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f87d31b3730>\nconn = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\nmethod = 'POST', url = '/session/e5a689c724648f0d5308caa4a8bd27b1/element'\ntimeout = Timeout(connect=None, read=None, total=None), chunked = False\nhttplib_request_kw = {'body': '{\"using\": \"xpath\", \"value\": \"/html/body/app-root/app-main-page/toolbar/div/div[3]/div[4]/svg-icon\"}', 'heade...tion': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.10.0 (python linux)'}}\ntimeout_obj = Timeout(connect=None, read=None, total=None)\n\n    def _make_request(\n        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n    ):\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param timeout:\n            Socket timeout in seconds for the request. This can be a\n            float or integer, which will set the same timeout value for\n            the socket connect and the socket read, or an instance of\n            :class:`urllib3.util.Timeout`, which gives you more fine-grained\n            control over your timeouts.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n    \n        # Trigger any extra validation we need to do.\n        try:\n            self._validate_conn(conn)\n        except (SocketTimeout, BaseSSLError) as e:\n            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n    \n        # conn.request() calls http.client.*.request, not the method in\n        # urllib3.request. It also calls makefile (recv) on the socket.\n        try:\n            if chunked:\n                conn.request_chunked(method, url, **httplib_request_kw)\n            else:\n>               conn.request(method, url, **httplib_request_kw)\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connectionpool.py:415: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\nmethod = 'POST', url = '/session/e5a689c724648f0d5308caa4a8bd27b1/element'\nbody = '{\"using\": \"xpath\", \"value\": \"/html/body/app-root/app-main-page/toolbar/div/div[3]/div[4]/svg-icon\"}'\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.10.0 (python linux)'}\n\n    def request(self, method, url, body=None, headers=None):\n        # Update the inner socket's timeout value to send the request.\n        # This only triggers if the connection is re-used.\n        if getattr(self, \"sock\", None) is not None:\n            self.sock.settimeout(self.timeout)\n    \n        if headers is None:\n            headers = {}\n        else:\n            # Avoid modifying the headers passed into .request()\n            headers = headers.copy()\n        if \"user-agent\" not in (six.ensure_str(k.lower()) for k in headers):\n            headers[\"User-Agent\"] = _get_default_user_agent()\n>       super(HTTPConnection, self).request(method, url, body=body, headers=headers)\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connection.py:244: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\nmethod = 'POST', url = '/session/e5a689c724648f0d5308caa4a8bd27b1/element'\nbody = '{\"using\": \"xpath\", \"value\": \"/html/body/app-root/app-main-page/toolbar/div/div[3]/div[4]/svg-icon\"}'\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.10.0 (python linux)'}\n\n    def request(self, method, url, body=None, headers={}, *,\n                encode_chunked=False):\n        \"\"\"Send a complete request to the server.\"\"\"\n>       self._send_request(method, url, body, headers, encode_chunked)\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/http/client.py:1282: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\nmethod = 'POST', url = '/session/e5a689c724648f0d5308caa4a8bd27b1/element'\nbody = b'{\"using\": \"xpath\", \"value\": \"/html/body/app-root/app-main-page/toolbar/div/div[3]/div[4]/svg-icon\"}'\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.10.0 (python linux)'}\nencode_chunked = False\n\n    def _send_request(self, method, url, body, headers, encode_chunked):\n        # Honor explicitly requested Host: and Accept-Encoding: headers.\n        header_names = frozenset(k.lower() for k in headers)\n        skips = {}\n        if 'host' in header_names:\n            skips['skip_host'] = 1\n        if 'accept-encoding' in header_names:\n            skips['skip_accept_encoding'] = 1\n    \n        self.putrequest(method, url, **skips)\n    \n        # chunked encoding will happen if HTTP/1.1 is used and either\n        # the caller passes encode_chunked=True or the following\n        # conditions hold:\n        # 1. content-length has not been explicitly set\n        # 2. the body is a file or iterable, but not a str or bytes-like\n        # 3. Transfer-Encoding has NOT been explicitly set by the caller\n    \n        if 'content-length' not in header_names:\n            # only chunk body if not explicitly set for backwards\n            # compatibility, assuming the client code is already handling the\n            # chunking\n            if 'transfer-encoding' not in header_names:\n                # if content-length cannot be automatically determined, fall\n                # back to chunked encoding\n                encode_chunked = False\n                content_length = self._get_content_length(body, method)\n                if content_length is None:\n                    if body is not None:\n                        if self.debuglevel > 0:\n                            print('Unable to determine size of %r' % body)\n                        encode_chunked = True\n                        self.putheader('Transfer-Encoding', 'chunked')\n                else:\n                    self.putheader('Content-Length', str(content_length))\n        else:\n            encode_chunked = False\n    \n        for hdr, value in headers.items():\n            self.putheader(hdr, value)\n        if isinstance(body, str):\n            # RFC 2616 Section 3.7.1 says that text default has a\n            # default charset of iso-8859-1.\n            body = _encode(body, 'body')\n>       self.endheaders(body, encode_chunked=encode_chunked)\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/http/client.py:1328: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\nmessage_body = b'{\"using\": \"xpath\", \"value\": \"/html/body/app-root/app-main-page/toolbar/div/div[3]/div[4]/svg-icon\"}'\n\n    def endheaders(self, message_body=None, *, encode_chunked=False):\n        \"\"\"Indicate that the last header line has been sent to the server.\n    \n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.\n        \"\"\"\n        if self.__state == _CS_REQ_STARTED:\n            self.__state = _CS_REQ_SENT\n        else:\n            raise CannotSendHeader()\n>       self._send_output(message_body, encode_chunked=encode_chunked)\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/http/client.py:1277: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\nmessage_body = b'{\"using\": \"xpath\", \"value\": \"/html/body/app-root/app-main-page/toolbar/div/div[3]/div[4]/svg-icon\"}'\nencode_chunked = False\n\n    def _send_output(self, message_body=None, encode_chunked=False):\n        \"\"\"Send the currently buffered request and clear the buffer.\n    \n        Appends an extra \\\\r\\\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        \"\"\"\n        self._buffer.extend((b\"\", b\"\"))\n        msg = b\"\\r\\n\".join(self._buffer)\n        del self._buffer[:]\n>       self.send(msg)\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/http/client.py:1037: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\ndata = b'POST /session/e5a689c724648f0d5308caa4a8bd27b1/element HTTP/1.1\\r\\nHost: localhost:45861\\r\\nAccept-Encoding: identit...t-Type: application/json;charset=UTF-8\\r\\nUser-Agent: selenium/4.10.0 (python linux)\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n>               self.connect()\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/http/client.py:975: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\n\n    def connect(self):\n>       conn = self._new_conn()\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connection.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\n\n    def _new_conn(self):\n        \"\"\"Establish a socket connection and set nodelay settings on it.\n    \n        :return: New socket connection.\n        \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw[\"source_address\"] = self.source_address\n    \n        if self.socket_options:\n            extra_kw[\"socket_options\"] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self._dns_host, self.port), self.timeout, **extra_kw\n            )\n    \n        except SocketTimeout:\n            raise ConnectTimeoutError(\n                self,\n                \"Connection to %s timed out. (connect timeout=%s)\"\n                % (self.host, self.timeout),\n            )\n    \n        except SocketError as e:\n>           raise NewConnectionError(\n                self, \"Failed to establish a new connection: %s\" % e\n            )\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>: Failed to establish a new connection: [Errno 111] Connection refused\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connection.py:186: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Test_Cases.test_platform.TestPlatform object at 0x7f87d31b0340>\nauthorization = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e5a689c724648f0d5308caa4a8bd27b1\")>\n\n    def test_platform(self, authorization):\n        self.driver = authorization\n        wait = WebDriverWait(self.driver, 10, 0.3)\n    \n        #settings\n        print(\"Settings are being tested...\")\n>       button_settings = self.driver.find_element(By.XPATH, '/html/body/app-root/app-main-page/toolbar/div/div['\n                                                            '3]/div[4]/svg-icon')\n\nTest_Cases/test_platform.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:740: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    response = self.command_executor.execute(driver_command, params)\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/remote_connection.py:290: in execute\n    return self._request(command_info[0], url, body=data)\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/remote_connection.py:311: in _request\n    response = self._conn.request(method, url, body=body, headers=headers)\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/request.py:78: in request\n    return self.request_encode_body(\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/request.py:170: in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/poolmanager.py:376: in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connectionpool.py:826: in urlopen\n    return self.urlopen(\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connectionpool.py:826: in urlopen\n    return self.urlopen(\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connectionpool.py:826: in urlopen\n    return self.urlopen(\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connectionpool.py:798: in urlopen\n    retries = retries.increment(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=None, redirect=None, status=None)\nmethod = 'POST', url = '/session/e5a689c724648f0d5308caa4a8bd27b1/element'\nresponse = None\nerror = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>: Failed to establish a new connection: [Errno 111] Connection refused')\n_pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f87d31b3730>\n_stacktrace = <traceback object at 0x7f87d2858600>\n\n    def increment(\n        self,\n        method=None,\n        url=None,\n        response=None,\n        error=None,\n        _pool=None,\n        _stacktrace=None,\n    ):\n        \"\"\"Return a new Retry object with incremented retry counters.\n    \n        :param response: A response object, or None, if the server did not\n            return a response.\n        :type response: :class:`~urllib3.response.HTTPResponse`\n        :param Exception error: An error encountered during the request, or\n            None if the response was received successfully.\n    \n        :return: A new ``Retry`` object.\n        \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        other = self.other\n        cause = \"unknown\"\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif error:\n            # Other retry?\n            if other is not None:\n                other -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = \"too many redirects\"\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and the given method is in the allowed_methods\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n                status = response.status\n    \n        history = self.history + (\n            RequestHistory(method, url, error, status, redirect_location),\n        )\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect,\n            read=read,\n            redirect=redirect,\n            status=status_count,\n            other=other,\n            history=history,\n        )\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=45861): Max retries exceeded with url: /session/e5a689c724648f0d5308caa4a8bd27b1/element (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/util/retry.py:592: MaxRetryError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"get_chrome_options","time":{"start":1691045220010,"stop":1691045220010,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"get_webdriver","time":{"start":1691045220011,"stop":1691045221062,"duration":1051},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"setup","time":{"start":1691045221062,"stop":1691045234833,"duration":13771},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false},{"name":"authorization","time":{"start":1691045234833,"stop":1691045237617,"duration":2784},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"testStage":{"status":"broken","statusMessage":"urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=45861): Max retries exceeded with url: /session/e5a689c724648f0d5308caa4a8bd27b1/element (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>: Failed to establish a new connection: [Errno 111] Connection refused'))","statusTrace":"self = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\n\n    def _new_conn(self):\n        \"\"\"Establish a socket connection and set nodelay settings on it.\n    \n        :return: New socket connection.\n        \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw[\"source_address\"] = self.source_address\n    \n        if self.socket_options:\n            extra_kw[\"socket_options\"] = self.socket_options\n    \n        try:\n>           conn = connection.create_connection(\n                (self._dns_host, self.port), self.timeout, **extra_kw\n            )\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connection.py:174: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('localhost', 45861), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(\n        address,\n        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n        source_address=None,\n        socket_options=None,\n    ):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`socket.getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith(\"[\"):\n            host = host.strip(\"[]\")\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        try:\n            host.encode(\"idna\")\n        except UnicodeError:\n            return six.raise_from(\n                LocationParseError(u\"'%s', label empty or too long\" % host), None\n            )\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n                sock.connect(sa)\n                return sock\n    \n            except socket.error as e:\n                err = e\n                if sock is not None:\n                    sock.close()\n                    sock = None\n    \n        if err is not None:\n>           raise err\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/util/connection.py:95: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\naddress = ('localhost', 45861), timeout = None, source_address = None\nsocket_options = [(6, 1, 1)]\n\n    def create_connection(\n        address,\n        timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n        source_address=None,\n        socket_options=None,\n    ):\n        \"\"\"Connect to *address* and return the socket object.\n    \n        Convenience function.  Connect to *address* (a 2-tuple ``(host,\n        port)``) and return the socket object.  Passing the optional\n        *timeout* parameter will set the timeout on the socket instance\n        before attempting to connect.  If no *timeout* is supplied, the\n        global default timeout setting returned by :func:`socket.getdefaulttimeout`\n        is used.  If *source_address* is set it must be a tuple of (host, port)\n        for the socket to bind as a source address before making the connection.\n        An host of '' or port 0 tells the OS to use the default.\n        \"\"\"\n    \n        host, port = address\n        if host.startswith(\"[\"):\n            host = host.strip(\"[]\")\n        err = None\n    \n        # Using the value from allowed_gai_family() in the context of getaddrinfo lets\n        # us select whether to work with IPv4 DNS records, IPv6 records, or both.\n        # The original create_connection function always returns all records.\n        family = allowed_gai_family()\n    \n        try:\n            host.encode(\"idna\")\n        except UnicodeError:\n            return six.raise_from(\n                LocationParseError(u\"'%s', label empty or too long\" % host), None\n            )\n    \n        for res in socket.getaddrinfo(host, port, family, socket.SOCK_STREAM):\n            af, socktype, proto, canonname, sa = res\n            sock = None\n            try:\n                sock = socket.socket(af, socktype, proto)\n    \n                # If provided, set socket level options before connecting.\n                _set_socket_options(sock, socket_options)\n    \n                if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n                    sock.settimeout(timeout)\n                if source_address:\n                    sock.bind(source_address)\n>               sock.connect(sa)\nE               ConnectionRefusedError: [Errno 111] Connection refused\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/util/connection.py:85: ConnectionRefusedError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f87d31b3730>\nmethod = 'POST', url = '/session/e5a689c724648f0d5308caa4a8bd27b1/element'\nbody = '{\"using\": \"xpath\", \"value\": \"/html/body/app-root/app-main-page/toolbar/div/div[3]/div[4]/svg-icon\"}'\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.10.0 (python linux)'}\nretries = Retry(total=0, connect=None, read=None, redirect=None, status=None)\nredirect = False, assert_same_host = False\ntimeout = <object object at 0x7f87d4d2a6d0>, pool_timeout = None\nrelease_conn = True, chunked = False, body_pos = None\nresponse_kw = {'request_url': 'http://localhost:45861/session/e5a689c724648f0d5308caa4a8bd27b1/element'}\nparsed_url = Url(scheme=None, auth=None, host=None, port=None, path='/session/e5a689c724648f0d5308caa4a8bd27b1/element', query=None, fragment=None)\ndestination_scheme = None, conn = None, release_this_conn = True\nhttp_tunnel_required = False, err = None, clean_exit = False\n\n    def urlopen(\n        self,\n        method,\n        url,\n        body=None,\n        headers=None,\n        retries=None,\n        redirect=True,\n        assert_same_host=True,\n        timeout=_Default,\n        pool_timeout=None,\n        release_conn=None,\n        chunked=False,\n        body_pos=None,\n        **response_kw\n    ):\n        \"\"\"\n        Get a connection from the pool and perform an HTTP request. This is the\n        lowest level call for making a request, so you'll need to specify all\n        the raw details.\n    \n        .. note::\n    \n           More commonly, it's appropriate to use a convenience method provided\n           by :class:`.RequestMethods`, such as :meth:`request`.\n    \n        .. note::\n    \n           `release_conn` will only behave as expected if\n           `preload_content=False` because we want to make\n           `preload_content=False` the default behaviour someday soon without\n           breaking backwards compatibility.\n    \n        :param method:\n            HTTP request method (such as GET, POST, PUT, etc.)\n    \n        :param url:\n            The URL to perform the request on.\n    \n        :param body:\n            Data to send in the request body, either :class:`str`, :class:`bytes`,\n            an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n    \n        :param headers:\n            Dictionary of custom headers to send, such as User-Agent,\n            If-None-Match, etc. If None, pool headers are used. If provided,\n            these headers completely replace any pool-specific headers.\n    \n        :param retries:\n            Configure the number of retries to allow before raising a\n            :class:`~urllib3.exceptions.MaxRetryError` exception.\n    \n            Pass ``None`` to retry until you receive a response. Pass a\n            :class:`~urllib3.util.retry.Retry` object for fine-grained control\n            over different types of retries.\n            Pass an integer number to retry connection errors that many times,\n            but no other types of errors. Pass zero to never retry.\n    \n            If ``False``, then retries are disabled and any exception is raised\n            immediately. Also, instead of raising a MaxRetryError on redirects,\n            the redirect response will be returned.\n    \n        :type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n    \n        :param redirect:\n            If True, automatically handle redirects (status codes 301, 302,\n            303, 307, 308). Each redirect counts as a retry. Disabling retries\n            will disable redirect, too.\n    \n        :param assert_same_host:\n            If ``True``, will make sure that the host of the pool requests is\n            consistent else will raise HostChangedError. When ``False``, you can\n            use the pool on an HTTP proxy and request foreign hosts.\n    \n        :param timeout:\n            If specified, overrides the default timeout for this one\n            request. It may be a float (in seconds) or an instance of\n            :class:`urllib3.util.Timeout`.\n    \n        :param pool_timeout:\n            If set and the pool is set to block=True, then this method will\n            block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n            connection is available within the time period.\n    \n        :param release_conn:\n            If False, then the urlopen call will not release the connection\n            back into the pool once a response is received (but will release if\n            you read the entire contents of the response such as when\n            `preload_content=True`). This is useful if you're not preloading\n            the response's content immediately. You will need to call\n            ``r.release_conn()`` on the response ``r`` to return the connection\n            back into the pool. If None, it takes the value of\n            ``response_kw.get('preload_content', True)``.\n    \n        :param chunked:\n            If True, urllib3 will send the body using chunked transfer\n            encoding. Otherwise, urllib3 will send the body using the standard\n            content-length form. Defaults to False.\n    \n        :param int body_pos:\n            Position to seek to in file-like body in the event of a retry or\n            redirect. Typically this won't need to be set because urllib3 will\n            auto-populate the value when needed.\n    \n        :param \\\\**response_kw:\n            Additional parameters are passed to\n            :meth:`urllib3.response.HTTPResponse.from_httplib`\n        \"\"\"\n    \n        parsed_url = parse_url(url)\n        destination_scheme = parsed_url.scheme\n    \n        if headers is None:\n            headers = self.headers\n    \n        if not isinstance(retries, Retry):\n            retries = Retry.from_int(retries, redirect=redirect, default=self.retries)\n    \n        if release_conn is None:\n            release_conn = response_kw.get(\"preload_content\", True)\n    \n        # Check host\n        if assert_same_host and not self.is_same_host(url):\n            raise HostChangedError(self, url, retries)\n    \n        # Ensure that the URL we're connecting to is properly encoded\n        if url.startswith(\"/\"):\n            url = six.ensure_str(_encode_target(url))\n        else:\n            url = six.ensure_str(parsed_url.url)\n    \n        conn = None\n    \n        # Track whether `conn` needs to be released before\n        # returning/raising/recursing. Update this variable if necessary, and\n        # leave `release_conn` constant throughout the function. That way, if\n        # the function recurses, the original value of `release_conn` will be\n        # passed down into the recursive call, and its value will be respected.\n        #\n        # See issue #651 [1] for details.\n        #\n        # [1] <https://github.com/urllib3/urllib3/issues/651>\n        release_this_conn = release_conn\n    \n        http_tunnel_required = connection_requires_http_tunnel(\n            self.proxy, self.proxy_config, destination_scheme\n        )\n    \n        # Merge the proxy headers. Only done when not using HTTP CONNECT. We\n        # have to copy the headers dict so we can safely change it without those\n        # changes being reflected in anyone else's copy.\n        if not http_tunnel_required:\n            headers = headers.copy()\n            headers.update(self.proxy_headers)\n    \n        # Must keep the exception bound to a separate variable or else Python 3\n        # complains about UnboundLocalError.\n        err = None\n    \n        # Keep track of whether we cleanly exited the except block. This\n        # ensures we do proper cleanup in finally.\n        clean_exit = False\n    \n        # Rewind body position, if needed. Record current position\n        # for future rewinds in the event of a redirect/retry.\n        body_pos = set_file_position(body, body_pos)\n    \n        try:\n            # Request a connection from the queue.\n            timeout_obj = self._get_timeout(timeout)\n            conn = self._get_conn(timeout=pool_timeout)\n    \n            conn.timeout = timeout_obj.connect_timeout\n    \n            is_new_proxy_conn = self.proxy is not None and not getattr(\n                conn, \"sock\", None\n            )\n            if is_new_proxy_conn and http_tunnel_required:\n                self._prepare_proxy(conn)\n    \n            # Make the request on the httplib connection object.\n>           httplib_response = self._make_request(\n                conn,\n                method,\n                url,\n                timeout=timeout_obj,\n                body=body,\n                headers=headers,\n                chunked=chunked,\n            )\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connectionpool.py:714: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f87d31b3730>\nconn = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\nmethod = 'POST', url = '/session/e5a689c724648f0d5308caa4a8bd27b1/element'\ntimeout = Timeout(connect=None, read=None, total=None), chunked = False\nhttplib_request_kw = {'body': '{\"using\": \"xpath\", \"value\": \"/html/body/app-root/app-main-page/toolbar/div/div[3]/div[4]/svg-icon\"}', 'heade...tion': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.10.0 (python linux)'}}\ntimeout_obj = Timeout(connect=None, read=None, total=None)\n\n    def _make_request(\n        self, conn, method, url, timeout=_Default, chunked=False, **httplib_request_kw\n    ):\n        \"\"\"\n        Perform a request on a given urllib connection object taken from our\n        pool.\n    \n        :param conn:\n            a connection from one of our connection pools\n    \n        :param timeout:\n            Socket timeout in seconds for the request. This can be a\n            float or integer, which will set the same timeout value for\n            the socket connect and the socket read, or an instance of\n            :class:`urllib3.util.Timeout`, which gives you more fine-grained\n            control over your timeouts.\n        \"\"\"\n        self.num_requests += 1\n    \n        timeout_obj = self._get_timeout(timeout)\n        timeout_obj.start_connect()\n        conn.timeout = Timeout.resolve_default_timeout(timeout_obj.connect_timeout)\n    \n        # Trigger any extra validation we need to do.\n        try:\n            self._validate_conn(conn)\n        except (SocketTimeout, BaseSSLError) as e:\n            # Py2 raises this as a BaseSSLError, Py3 raises it as socket timeout.\n            self._raise_timeout(err=e, url=url, timeout_value=conn.timeout)\n            raise\n    \n        # conn.request() calls http.client.*.request, not the method in\n        # urllib3.request. It also calls makefile (recv) on the socket.\n        try:\n            if chunked:\n                conn.request_chunked(method, url, **httplib_request_kw)\n            else:\n>               conn.request(method, url, **httplib_request_kw)\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connectionpool.py:415: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\nmethod = 'POST', url = '/session/e5a689c724648f0d5308caa4a8bd27b1/element'\nbody = '{\"using\": \"xpath\", \"value\": \"/html/body/app-root/app-main-page/toolbar/div/div[3]/div[4]/svg-icon\"}'\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.10.0 (python linux)'}\n\n    def request(self, method, url, body=None, headers=None):\n        # Update the inner socket's timeout value to send the request.\n        # This only triggers if the connection is re-used.\n        if getattr(self, \"sock\", None) is not None:\n            self.sock.settimeout(self.timeout)\n    \n        if headers is None:\n            headers = {}\n        else:\n            # Avoid modifying the headers passed into .request()\n            headers = headers.copy()\n        if \"user-agent\" not in (six.ensure_str(k.lower()) for k in headers):\n            headers[\"User-Agent\"] = _get_default_user_agent()\n>       super(HTTPConnection, self).request(method, url, body=body, headers=headers)\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connection.py:244: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\nmethod = 'POST', url = '/session/e5a689c724648f0d5308caa4a8bd27b1/element'\nbody = '{\"using\": \"xpath\", \"value\": \"/html/body/app-root/app-main-page/toolbar/div/div[3]/div[4]/svg-icon\"}'\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.10.0 (python linux)'}\n\n    def request(self, method, url, body=None, headers={}, *,\n                encode_chunked=False):\n        \"\"\"Send a complete request to the server.\"\"\"\n>       self._send_request(method, url, body, headers, encode_chunked)\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/http/client.py:1282: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\nmethod = 'POST', url = '/session/e5a689c724648f0d5308caa4a8bd27b1/element'\nbody = b'{\"using\": \"xpath\", \"value\": \"/html/body/app-root/app-main-page/toolbar/div/div[3]/div[4]/svg-icon\"}'\nheaders = {'Accept': 'application/json', 'Connection': 'keep-alive', 'Content-Type': 'application/json;charset=UTF-8', 'User-Agent': 'selenium/4.10.0 (python linux)'}\nencode_chunked = False\n\n    def _send_request(self, method, url, body, headers, encode_chunked):\n        # Honor explicitly requested Host: and Accept-Encoding: headers.\n        header_names = frozenset(k.lower() for k in headers)\n        skips = {}\n        if 'host' in header_names:\n            skips['skip_host'] = 1\n        if 'accept-encoding' in header_names:\n            skips['skip_accept_encoding'] = 1\n    \n        self.putrequest(method, url, **skips)\n    \n        # chunked encoding will happen if HTTP/1.1 is used and either\n        # the caller passes encode_chunked=True or the following\n        # conditions hold:\n        # 1. content-length has not been explicitly set\n        # 2. the body is a file or iterable, but not a str or bytes-like\n        # 3. Transfer-Encoding has NOT been explicitly set by the caller\n    \n        if 'content-length' not in header_names:\n            # only chunk body if not explicitly set for backwards\n            # compatibility, assuming the client code is already handling the\n            # chunking\n            if 'transfer-encoding' not in header_names:\n                # if content-length cannot be automatically determined, fall\n                # back to chunked encoding\n                encode_chunked = False\n                content_length = self._get_content_length(body, method)\n                if content_length is None:\n                    if body is not None:\n                        if self.debuglevel > 0:\n                            print('Unable to determine size of %r' % body)\n                        encode_chunked = True\n                        self.putheader('Transfer-Encoding', 'chunked')\n                else:\n                    self.putheader('Content-Length', str(content_length))\n        else:\n            encode_chunked = False\n    \n        for hdr, value in headers.items():\n            self.putheader(hdr, value)\n        if isinstance(body, str):\n            # RFC 2616 Section 3.7.1 says that text default has a\n            # default charset of iso-8859-1.\n            body = _encode(body, 'body')\n>       self.endheaders(body, encode_chunked=encode_chunked)\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/http/client.py:1328: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\nmessage_body = b'{\"using\": \"xpath\", \"value\": \"/html/body/app-root/app-main-page/toolbar/div/div[3]/div[4]/svg-icon\"}'\n\n    def endheaders(self, message_body=None, *, encode_chunked=False):\n        \"\"\"Indicate that the last header line has been sent to the server.\n    \n        This method sends the request to the server.  The optional message_body\n        argument can be used to pass a message body associated with the\n        request.\n        \"\"\"\n        if self.__state == _CS_REQ_STARTED:\n            self.__state = _CS_REQ_SENT\n        else:\n            raise CannotSendHeader()\n>       self._send_output(message_body, encode_chunked=encode_chunked)\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/http/client.py:1277: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\nmessage_body = b'{\"using\": \"xpath\", \"value\": \"/html/body/app-root/app-main-page/toolbar/div/div[3]/div[4]/svg-icon\"}'\nencode_chunked = False\n\n    def _send_output(self, message_body=None, encode_chunked=False):\n        \"\"\"Send the currently buffered request and clear the buffer.\n    \n        Appends an extra \\\\r\\\\n to the buffer.\n        A message_body may be specified, to be appended to the request.\n        \"\"\"\n        self._buffer.extend((b\"\", b\"\"))\n        msg = b\"\\r\\n\".join(self._buffer)\n        del self._buffer[:]\n>       self.send(msg)\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/http/client.py:1037: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\ndata = b'POST /session/e5a689c724648f0d5308caa4a8bd27b1/element HTTP/1.1\\r\\nHost: localhost:45861\\r\\nAccept-Encoding: identit...t-Type: application/json;charset=UTF-8\\r\\nUser-Agent: selenium/4.10.0 (python linux)\\r\\nConnection: keep-alive\\r\\n\\r\\n'\n\n    def send(self, data):\n        \"\"\"Send `data' to the server.\n        ``data`` can be a string object, a bytes object, an array object, a\n        file-like object that supports a .read() method, or an iterable object.\n        \"\"\"\n    \n        if self.sock is None:\n            if self.auto_open:\n>               self.connect()\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/http/client.py:975: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\n\n    def connect(self):\n>       conn = self._new_conn()\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connection.py:205: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>\n\n    def _new_conn(self):\n        \"\"\"Establish a socket connection and set nodelay settings on it.\n    \n        :return: New socket connection.\n        \"\"\"\n        extra_kw = {}\n        if self.source_address:\n            extra_kw[\"source_address\"] = self.source_address\n    \n        if self.socket_options:\n            extra_kw[\"socket_options\"] = self.socket_options\n    \n        try:\n            conn = connection.create_connection(\n                (self._dns_host, self.port), self.timeout, **extra_kw\n            )\n    \n        except SocketTimeout:\n            raise ConnectTimeoutError(\n                self,\n                \"Connection to %s timed out. (connect timeout=%s)\"\n                % (self.host, self.timeout),\n            )\n    \n        except SocketError as e:\n>           raise NewConnectionError(\n                self, \"Failed to establish a new connection: %s\" % e\n            )\nE           urllib3.exceptions.NewConnectionError: <urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>: Failed to establish a new connection: [Errno 111] Connection refused\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connection.py:186: NewConnectionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Test_Cases.test_platform.TestPlatform object at 0x7f87d31b0340>\nauthorization = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"e5a689c724648f0d5308caa4a8bd27b1\")>\n\n    def test_platform(self, authorization):\n        self.driver = authorization\n        wait = WebDriverWait(self.driver, 10, 0.3)\n    \n        #settings\n        print(\"Settings are being tested...\")\n>       button_settings = self.driver.find_element(By.XPATH, '/html/body/app-root/app-main-page/toolbar/div/div['\n                                                            '3]/div[4]/svg-icon')\n\nTest_Cases/test_platform.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:740: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:344: in execute\n    response = self.command_executor.execute(driver_command, params)\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/remote_connection.py:290: in execute\n    return self._request(command_info[0], url, body=data)\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/selenium/webdriver/remote/remote_connection.py:311: in _request\n    response = self._conn.request(method, url, body=body, headers=headers)\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/request.py:78: in request\n    return self.request_encode_body(\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/request.py:170: in request_encode_body\n    return self.urlopen(method, url, **extra_kw)\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/poolmanager.py:376: in urlopen\n    response = conn.urlopen(method, u.request_uri, **kw)\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connectionpool.py:826: in urlopen\n    return self.urlopen(\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connectionpool.py:826: in urlopen\n    return self.urlopen(\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connectionpool.py:826: in urlopen\n    return self.urlopen(\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/connectionpool.py:798: in urlopen\n    retries = retries.increment(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = Retry(total=0, connect=None, read=None, redirect=None, status=None)\nmethod = 'POST', url = '/session/e5a689c724648f0d5308caa4a8bd27b1/element'\nresponse = None\nerror = NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>: Failed to establish a new connection: [Errno 111] Connection refused')\n_pool = <urllib3.connectionpool.HTTPConnectionPool object at 0x7f87d31b3730>\n_stacktrace = <traceback object at 0x7f87d2858600>\n\n    def increment(\n        self,\n        method=None,\n        url=None,\n        response=None,\n        error=None,\n        _pool=None,\n        _stacktrace=None,\n    ):\n        \"\"\"Return a new Retry object with incremented retry counters.\n    \n        :param response: A response object, or None, if the server did not\n            return a response.\n        :type response: :class:`~urllib3.response.HTTPResponse`\n        :param Exception error: An error encountered during the request, or\n            None if the response was received successfully.\n    \n        :return: A new ``Retry`` object.\n        \"\"\"\n        if self.total is False and error:\n            # Disabled, indicate to re-raise the error.\n            raise six.reraise(type(error), error, _stacktrace)\n    \n        total = self.total\n        if total is not None:\n            total -= 1\n    \n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        other = self.other\n        cause = \"unknown\"\n        status = None\n        redirect_location = None\n    \n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise six.reraise(type(error), error, _stacktrace)\n            elif connect is not None:\n                connect -= 1\n    \n        elif error and self._is_read_error(error):\n            # Read retry?\n            if read is False or not self._is_method_retryable(method):\n                raise six.reraise(type(error), error, _stacktrace)\n            elif read is not None:\n                read -= 1\n    \n        elif error:\n            # Other retry?\n            if other is not None:\n                other -= 1\n    \n        elif response and response.get_redirect_location():\n            # Redirect retry?\n            if redirect is not None:\n                redirect -= 1\n            cause = \"too many redirects\"\n            redirect_location = response.get_redirect_location()\n            status = response.status\n    \n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and the given method is in the allowed_methods\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n                status = response.status\n    \n        history = self.history + (\n            RequestHistory(method, url, error, status, redirect_location),\n        )\n    \n        new_retry = self.new(\n            total=total,\n            connect=connect,\n            read=read,\n            redirect=redirect,\n            status=status_count,\n            other=other,\n            history=history,\n        )\n    \n        if new_retry.is_exhausted():\n>           raise MaxRetryError(_pool, url, error or ResponseError(cause))\nE           urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=45861): Max retries exceeded with url: /session/e5a689c724648f0d5308caa4a8bd27b1/element (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7f87d3188bb0>: Failed to establish a new connection: [Errno 111] Connection refused'))\n\n/opt/hostedtoolcache/Python/3.10.10/x64/lib/python3.10/site-packages/urllib3/util/retry.py:592: MaxRetryError","steps":[],"attachments":[{"uid":"dd8a28a922753601","name":"log","source":"dd8a28a922753601.txt","type":"text/plain","size":1097}],"parameters":[],"stepsCount":0,"attachmentsCount":1,"shouldDisplayMessage":true,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"Test_Cases"},{"name":"suite","value":"test_platform"},{"name":"subSuite","value":"TestPlatform"},{"name":"host","value":"fv-az309-370"},{"name":"thread","value":"2464-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"Test_Cases.test_platform"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":10,"skipped":0,"passed":6,"unknown":0,"total":16},"items":[{"uid":"39a1371f7268d1e1","reportUrl":"https://MaximKrivenko.github.io/LTA_TESTS/43//#testresult/39a1371f7268d1e1","status":"broken","statusDetails":"urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=59593): Max retries exceeded with url: /session/9568bcb038578a21277e87dd4550c15b/element (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7ff60f745a50>: Failed to establish a new connection: [Errno 111] Connection refused'))","time":{"start":1690989530018,"stop":1690989530021,"duration":3}},{"uid":"fa1cd0b72716ff5e","reportUrl":"https://MaximKrivenko.github.io/LTA_TESTS/42//#testresult/fa1cd0b72716ff5e","status":"broken","statusDetails":"urllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='localhost', port=45237): Max retries exceeded with url: /session/ac81092ea0663ab08d44674463c37387/element (Caused by NewConnectionError('<urllib3.connection.HTTPConnection object at 0x7fdf213516f0>: Failed to establish a new connection: [Errno 111] Connection refused'))","time":{"start":1690988225726,"stop":1690988225729,"duration":3}},{"uid":"a12555a5a3b4cbe7","reportUrl":"https://MaximKrivenko.github.io/LTA_TESTS/41//#testresult/a12555a5a3b4cbe7","status":"broken","statusDetails":"AttributeError: 'WebDriver' object has no attribute 'switch_to_window'","time":{"start":1690985126026,"stop":1690985126140,"duration":114}},{"uid":"a4a36eff06920c8d","reportUrl":"https://MaximKrivenko.github.io/LTA_TESTS/38//#testresult/a4a36eff06920c8d","status":"broken","statusDetails":"ValueError: There is no such driver by url https://chromedriver.storage.googleapis.com/115.0.5790/chromedriver_linux64.zip","time":{"start":1690975072548,"stop":1690975072548,"duration":0}},{"uid":"19d3fd949f8570c5","reportUrl":"https://MaximKrivenko.github.io/LTA_TESTS/37//#testresult/19d3fd949f8570c5","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: Chrome failed to start: exited abnormally.\n  (unknown error: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location /usr/bin/google-chrome is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n#0 0x55b34f07c783 <unknown>\n#1 0x55b34eda8917 <unknown>\n#2 0x55b34edd3978 <unknown>\n#3 0x55b34edd09c9 <unknown>\n#4 0x55b34ee10a13 <unknown>\n#5 0x55b34ee1015f <unknown>\n#6 0x55b34ee07bd3 <unknown>\n#7 0x55b34eddba7b <unknown>\n#8 0x55b34eddc81e <unknown>\n#9 0x55b34f03de98 <unknown>\n#10 0x55b34f041d67 <unknown>\n#11 0x55b34f04c32c <unknown>\n#12 0x55b34f042993 <unknown>\n#13 0x55b34f011827 <unknown>\n#14 0x55b34f0668a8 <unknown>\n#15 0x55b34f066a36 <unknown>\n#16 0x55b34f0755f3 <unknown>\n#17 0x7f282c34ab43 <unknown>","time":{"start":1690974900846,"stop":1690974900846,"duration":0}},{"uid":"67f3e14d42c60de0","reportUrl":"https://MaximKrivenko.github.io/LTA_TESTS/36//#testresult/67f3e14d42c60de0","status":"broken","statusDetails":"AttributeError: 'WebDriver' object has no attribute 'switch_to_window'","time":{"start":1690973766403,"stop":1690973766515,"duration":112}},{"uid":"261e81c01d1c89ec","reportUrl":"https://MaximKrivenko.github.io/LTA_TESTS/35//#testresult/261e81c01d1c89ec","status":"broken","statusDetails":"ValueError: There is no such driver by url https://chromedriver.storage.googleapis.com/115.0.5790/chromedriver_linux64.zip","time":{"start":1690973260304,"stop":1690973260304,"duration":0}},{"uid":"b72acb35bde08bd0","reportUrl":"https://MaximKrivenko.github.io/LTA_TESTS/34//#testresult/b72acb35bde08bd0","status":"broken","statusDetails":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_TIMED_OUT\n  (Session info: headless chrome=115.0.5790.110)\nStacktrace:\n#0 0x5606d2d87783 <unknown>\n#1 0x5606d2ab3917 <unknown>\n#2 0x5606d2aab989 <unknown>\n#3 0x5606d2a9af52 <unknown>\n#4 0x5606d2a9c68b <unknown>\n#5 0x5606d2a9b32d <unknown>\n#6 0x5606d2a9a2ec <unknown>\n#7 0x5606d2a9a25e <unknown>\n#8 0x5606d2a98f1a <unknown>\n#9 0x5606d2a9936a <unknown>\n#10 0x5606d2ab57d0 <unknown>\n#11 0x5606d2b2b885 <unknown>\n#12 0x5606d2b12e02 <unknown>\n#13 0x5606d2b2b0d9 <unknown>\n#14 0x5606d2b12bd3 <unknown>\n#15 0x5606d2ae6a7b <unknown>\n#16 0x5606d2ae781e <unknown>\n#17 0x5606d2d48e98 <unknown>\n#18 0x5606d2d4cd67 <unknown>\n#19 0x5606d2d5732c <unknown>\n#20 0x5606d2d4d993 <unknown>\n#21 0x5606d2d1c827 <unknown>\n#22 0x5606d2d718a8 <unknown>\n#23 0x5606d2d71a36 <unknown>\n#24 0x5606d2d805f3 <unknown>\n#25 0x7fe15aef0b43 <unknown>","time":{"start":1690972693235,"stop":1690972693235,"duration":0}},{"uid":"8f5e08e0f4f7ac0","reportUrl":"https://MaximKrivenko.github.io/LTA_TESTS/33//#testresult/8f5e08e0f4f7ac0","status":"broken","statusDetails":"ValueError: There is no such driver by url https://chromedriver.storage.googleapis.com/115.0.5790/chromedriver_linux64.zip","time":{"start":1690971483385,"stop":1690971483385,"duration":0}},{"uid":"f7fba71f01d4862d","reportUrl":"https://MaximKrivenko.github.io/LTA_TESTS/32//#testresult/f7fba71f01d4862d","status":"passed","time":{"start":1682507322438,"stop":1682507327429,"duration":4991}},{"uid":"e1aa7b1036aa8a40","reportUrl":"https://MaximKrivenko.github.io/LTA_TESTS/32//#testresult/e1aa7b1036aa8a40","status":"passed","time":{"start":1682505903845,"stop":1682505908472,"duration":4627}},{"uid":"fefc9db49077ac7b","reportUrl":"https://MaximKrivenko.github.io/LTA_TESTS/31//#testresult/fefc9db49077ac7b","status":"passed","time":{"start":1682504152272,"stop":1682504157376,"duration":5104}},{"uid":"9fb5079ea1cada3c","reportUrl":"https://MaximKrivenko.github.io/LTA_TESTS/30//#testresult/9fb5079ea1cada3c","status":"passed","time":{"start":1682503627546,"stop":1682503633707,"duration":6161}},{"uid":"35587a2ece4ca77b","reportUrl":"https://MaximKrivenko.github.io/LTA_TESTS/29//#testresult/35587a2ece4ca77b","status":"passed","time":{"start":1682502950875,"stop":1682502955370,"duration":4495}},{"uid":"1811936264309585","reportUrl":"https://MaximKrivenko.github.io/LTA_TESTS/28//#testresult/1811936264309585","status":"passed","time":{"start":1682500790654,"stop":1682500794897,"duration":4243}}]},"tags":[]},"source":"6fd331fad8716155.json","parameterValues":[]}